// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	storage "github.com/azaliaz/quote-service/internal/storage"
	gomock "github.com/golang/mock/gomock"
)

// MockQuoteStorage is a mock of QuoteStorage interface.
type MockQuoteStorage struct {
	ctrl     *gomock.Controller
	recorder *MockQuoteStorageMockRecorder
}

// MockQuoteStorageMockRecorder is the mock recorder for MockQuoteStorage.
type MockQuoteStorageMockRecorder struct {
	mock *MockQuoteStorage
}

// NewMockQuoteStorage creates a new mock instance.
func NewMockQuoteStorage(ctrl *gomock.Controller) *MockQuoteStorage {
	mock := &MockQuoteStorage{ctrl: ctrl}
	mock.recorder = &MockQuoteStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuoteStorage) EXPECT() *MockQuoteStorageMockRecorder {
	return m.recorder
}

// AddQuote mocks base method.
func (m *MockQuoteStorage) AddQuote(ctx context.Context, quote *storage.Quote) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddQuote", ctx, quote)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddQuote indicates an expected call of AddQuote.
func (mr *MockQuoteStorageMockRecorder) AddQuote(ctx, quote interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddQuote", reflect.TypeOf((*MockQuoteStorage)(nil).AddQuote), ctx, quote)
}

// DeleteQuote mocks base method.
func (m *MockQuoteStorage) DeleteQuote(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQuote", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteQuote indicates an expected call of DeleteQuote.
func (mr *MockQuoteStorageMockRecorder) DeleteQuote(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQuote", reflect.TypeOf((*MockQuoteStorage)(nil).DeleteQuote), ctx, id)
}

// GetAllQuotes mocks base method.
func (m *MockQuoteStorage) GetAllQuotes(ctx context.Context) ([]*storage.Quote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllQuotes", ctx)
	ret0, _ := ret[0].([]*storage.Quote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllQuotes indicates an expected call of GetAllQuotes.
func (mr *MockQuoteStorageMockRecorder) GetAllQuotes(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllQuotes", reflect.TypeOf((*MockQuoteStorage)(nil).GetAllQuotes), ctx)
}

// GetQuotesByAuthor mocks base method.
func (m *MockQuoteStorage) GetQuotesByAuthor(ctx context.Context, author string) ([]*storage.Quote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuotesByAuthor", ctx, author)
	ret0, _ := ret[0].([]*storage.Quote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuotesByAuthor indicates an expected call of GetQuotesByAuthor.
func (mr *MockQuoteStorageMockRecorder) GetQuotesByAuthor(ctx, author interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuotesByAuthor", reflect.TypeOf((*MockQuoteStorage)(nil).GetQuotesByAuthor), ctx, author)
}

// GetRandomQuote mocks base method.
func (m *MockQuoteStorage) GetRandomQuote(ctx context.Context) (*storage.Quote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRandomQuote", ctx)
	ret0, _ := ret[0].(*storage.Quote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRandomQuote indicates an expected call of GetRandomQuote.
func (mr *MockQuoteStorageMockRecorder) GetRandomQuote(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRandomQuote", reflect.TypeOf((*MockQuoteStorage)(nil).GetRandomQuote), ctx)
}
