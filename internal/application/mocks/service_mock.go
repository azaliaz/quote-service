// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	application "github.com/azaliaz/quote-service/internal/application"
	gomock "github.com/golang/mock/gomock"
)

// MockQuoteService is a mock of QuoteService interface.
type MockQuoteService struct {
	ctrl     *gomock.Controller
	recorder *MockQuoteServiceMockRecorder
}

// MockQuoteServiceMockRecorder is the mock recorder for MockQuoteService.
type MockQuoteServiceMockRecorder struct {
	mock *MockQuoteService
}

// NewMockQuoteService creates a new mock instance.
func NewMockQuoteService(ctrl *gomock.Controller) *MockQuoteService {
	mock := &MockQuoteService{ctrl: ctrl}
	mock.recorder = &MockQuoteServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuoteService) EXPECT() *MockQuoteServiceMockRecorder {
	return m.recorder
}

// AddQuote mocks base method.
func (m *MockQuoteService) AddQuote(ctx context.Context, req *application.AddQuoteRequest) (*application.AddQuoteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddQuote", ctx, req)
	ret0, _ := ret[0].(*application.AddQuoteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddQuote indicates an expected call of AddQuote.
func (mr *MockQuoteServiceMockRecorder) AddQuote(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddQuote", reflect.TypeOf((*MockQuoteService)(nil).AddQuote), ctx, req)
}

// DeleteQuote mocks base method.
func (m *MockQuoteService) DeleteQuote(ctx context.Context, req *application.DeleteQuoteRequest) (*application.DeleteQuoteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQuote", ctx, req)
	ret0, _ := ret[0].(*application.DeleteQuoteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteQuote indicates an expected call of DeleteQuote.
func (mr *MockQuoteServiceMockRecorder) DeleteQuote(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQuote", reflect.TypeOf((*MockQuoteService)(nil).DeleteQuote), ctx, req)
}

// GetQuotes mocks base method.
func (m *MockQuoteService) GetQuotes(ctx context.Context, req *application.GetQuotesRequest) (*application.GetQuotesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuotes", ctx, req)
	ret0, _ := ret[0].(*application.GetQuotesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuotes indicates an expected call of GetQuotes.
func (mr *MockQuoteServiceMockRecorder) GetQuotes(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuotes", reflect.TypeOf((*MockQuoteService)(nil).GetQuotes), ctx, req)
}

// GetQuotesByAuthor mocks base method.
func (m *MockQuoteService) GetQuotesByAuthor(ctx context.Context, req *application.GetQuotesByAuthorRequest) (*application.GetQuotesByAuthorResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuotesByAuthor", ctx, req)
	ret0, _ := ret[0].(*application.GetQuotesByAuthorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuotesByAuthor indicates an expected call of GetQuotesByAuthor.
func (mr *MockQuoteServiceMockRecorder) GetQuotesByAuthor(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuotesByAuthor", reflect.TypeOf((*MockQuoteService)(nil).GetQuotesByAuthor), ctx, req)
}

// GetRandomQuote mocks base method.
func (m *MockQuoteService) GetRandomQuote(ctx context.Context, req *application.GetRandomQuoteRequest) (*application.GetRandomQuoteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRandomQuote", ctx, req)
	ret0, _ := ret[0].(*application.GetRandomQuoteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRandomQuote indicates an expected call of GetRandomQuote.
func (mr *MockQuoteServiceMockRecorder) GetRandomQuote(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRandomQuote", reflect.TypeOf((*MockQuoteService)(nil).GetRandomQuote), ctx, req)
}
